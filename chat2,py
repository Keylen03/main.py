import discord
from discord.ext import commands
import random
import os
import requests
import asyncio

description = '''An example bot to showcase the discord.ext.commands extension
module.

There are a number of utility commands being showcased here.'''

intents = discord.Intents.default()
intents.members = True
intents.message_content = True

bot = commands.Bot(command_prefix='$', description=description, intents=intents)


@bot.event
async def on_ready():
    print(f'Logged in as {bot.user} (ID: {bot.user.id})')
    print('------')

#Toma dos numeros y los suma. Sintaxis: $add numero numero
@bot.command()
async def add(ctx, left: int, right: int):
    """Adds two numbers together."""
    await ctx.send(str(left)+ " + " +str(right)+ " es = " + str(left + right))

#Toma un formato de dados de la forma NdN y lanza los dados. Sintaxis: $roll NdN
@bot.command()
async def roll(ctx, dice: str):
    """Rolls a dice in NdN format."""
    try:
        rolls, limit = map(int, dice.split('d'))
    except Exception:
        await ctx.send('Format has to be in NdN!')
        return

    result = ', '.join(str(random.randint(1, limit)) for r in range(rolls))
    await ctx.send("Dados... "+ result)

#Toma varias opciones y elige una. Sintaxis: $choice a b c d
@bot.command(description='For when you wanna settle the score some other way')
async def choose(ctx, *choices: str):
    """Chooses between multiple choices."""
    await ctx.send(random.choice(choices))


@bot.command()
async def repeat(ctx, times: int, content='repeating...'):
    """Repeats a message multiple times."""
    for i in range(times):
        await ctx.send(content)


@bot.command()
async def joined(ctx, member: discord.Member):
    """Says when a member joined."""
    await ctx.send(f'{member.name} joined {discord.utils.format_dt(member.joined_at)}')


@bot.group()
async def cool(ctx):
    """Says if a user is cool.

    In reality this just checks if a subcommand is being invoked.
    """
    if ctx.invoked_subcommand is None:
        await ctx.send(f'No, {ctx.subcommand_passed} is not cool')

@bot.command()
async def meme(ctx):
    img_name = random.choice(os.listdir('imagenes'))
    with open(f'imagenes/{img_name}', 'rb') as f:
        picture = discord.File(f)
@bot.command()
async def consciencia(ctx):
    await ctx.send("""La basura tecnológica son los residuos que se producen por la eliminación de los equipos que funcionan con electricidad. Estos residuos contienen sustancias tóxicas y metales pesados, como por ejemplo el plomo, que pueden contaminar el suelo, el agua y los alimentos. 
La acumulación de basura tecnológica supone un daño significativo en los ecosistemas. Estos elementos tóxicos contaminan ríos, lagos y mares, y emiten gases a la atmósfera que provocan desequilibrios en los ecosistemas. 
""")
    photo = random.choice(os.listdir("medioambiente"))
    with open(f"medioambiente/{photo}", "rb") as f:
        picture = discord.File(f)
    await ctx.send(file=picture)

@bot.command()
async def planet_sick(ctx):
    photo = random.choice(os.listdir("c_planeta"))
    with open(f"c_planeta/{photo}", "rb") as f:
        picture = discord.File(f)
    await ctx.send(file=picture)
 
    await ctx.send(file=picture)

carpeta_nombre = 'imagenes'
imagen_nombre = 'MEME.png'
imagen_path = os.path.join(carpeta_nombre, imagen_nombre)

def obtener_acertijo_aleatorio():
    acertijos = ["Tengo un arco, no soy flecha y sí de madera.", 
                 "Son dos abanicos que están todo el día sin parar, pero cuando te duermas se paran y quietos se quedarán.", 
                 "Hay algo que, aunque te pertenezca, la gente siempre lo utiliza más que tú. ¿Qué es?"]
    return random.choice(acertijos)

def es_respuesta_correcta(respuesta):
    respuestas_correctas = ["el violin", "las pestañas", "tu nombre"]
    return respuesta.lower() in respuestas_correctas

@bot.command()
async def exclusive(ctx):
    if random.randint(1,5) == 1:
     with open(imagen_path, 'rb') as f:
        picture = discord.File(f)
     await ctx.send(file=picture)
    else:
        await ctx.send("Parece que no eres digno aun de verlo...")
        await ctx.send("Si adivinas un acertijo, quizas lo seas...")
        acertijo = obtener_acertijo_aleatorio() 
        await ctx.send(f"¡Aquí tienes un acertijo!\n{acertijo}")

        def verificar_respuesta(m):
            return m.author == ctx.author and m.channel == ctx.channel

        try:
            respuesta = await bot.wait_for('message', check=verificar_respuesta, timeout=30)
        except asyncio.TimeoutError:
            await ctx.send("¡Tiempo agotado! Parece que no adivinaste a tiempo.")
        else:
            if es_respuesta_correcta(respuesta.content):  
                await ctx.send("¡Correcto! Aquí está la imagen:")
                with open(imagen_path, 'rb') as f:
                    picture = discord.File(f)
                await ctx.send(file=picture)
            else:
                await ctx.send("¡Incorrecto! Parece que no eres digno aún de ver la imagen.")

def get_dog_image_url():    
    url =  "https://random.dog/woof.json"
    res = requests.get(url)
    data = res.json()
    return data['url']
def get_duck_image_url():    
    url = 'https://random-d.uk/api/random'
    res = requests.get(url)
    data = res.json()
    return data['url']


@bot.command('dog')
async def dog(ctx):
    '''Una vez que llamamos al comando duck, 
    el programa llama a la función get_duck_image_url'''
    image_url = get_dog_image_url()
    await ctx.send("Aqui tienes tu perrito")
    await ctx.send(image_url)

@bot.command("duck")
async def fox(ctx):
    image_url = get_duck_image_url()
    await ctx.send("Aqui tienes tu patito")
    await ctx.send(image_url)

@cool.command(name='bot')
async def bot_(ctx):
    """Is the bot cool?"""
    await ctx.send('Yes, the bot is cool.')


bot.run('TOKEN')
